@Library('my-shared-library') _
pipeline
{
    agent any
    environment {
        AWS_ACCOUNT_ID="371078282635"
        AWS_DEFAULT_REGION="us-east-1"
        IMAGE_REPO_NAME="springboot"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
    parameters{
        choice(name: 'action', choices: 'create\ndelete',description: 'Choose Create/Destroy')
        string(name: 'aws_acc_id', description: "Name of AWS Account ID" ,defaultValue: '371078282635')
        string(name: 'Region', description: "Name of the Region" ,defaultValue: 'us-east-1')
        string(name: 'ECR_Repo_Name', description: "Name of the User" ,defaultValue: 'springboot')
    }
    stages
    {
        
        stage('GIT Checkout'){
            when { expression { params.action == 'create' }}
            steps{
                script{
                    gitCheckout(
                        branch: "main",
                        url: "https://github.com/THANUSHKIRAN/Java_Application_CICD.git"
                    )
                }
            }
        }
        // stage('UNIT Test Maven')
        // {
        //     when { expression { params.action == 'create' }}
        //     steps{
        //         script{
        //             mvntest()
        //         }
        //     }
        // }
        // stage('MAVEN Integration Testing')
        // {
        //     when { expression { params.action == 'create' }}
        //     steps{
        //         script{
        //             mvnIntegrationTest()
        //         }
        //     }
        // }
        // stage('Static Code Analysis')
        // {
        //     when { expression { params.action == 'create' }}
        //     steps{
        //         script{
        //             def SonarQubecredentialsId='project1'
        //             StaticCodeAnalysis(SonarQubecredentialsId)
        //         }
        //     }
        // }
        // stage('Quality Gate Check')
        // {
        //     when { expression { params.action == 'create' }}
        //     steps{
        //         script{
        //             def QualityGateStatuscredentialsId='project1'
        //             QualityGateStatus(QualityGateStatuscredentialsId)
        //         }
        //     }
        // }
        stage('Logging into AWS ECR') {
            steps {
                script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
        }
        stage('Maven Build')
        {
            when { expression { params.action == 'create' }}
            steps{
                script{
                    
                    mvnBuild()
                }
            }
        }

        stage('Docker Image Build:ECR')
        {
            when { expression { params.action == 'create' }}
            steps{
                script{
                    
                    dockerBuildECR("${params.aws_acc_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }

        stage('Docker Image Scan using Trivy:ECR')
        {
            when { expression { params.action == 'create' }}
            steps{
                script{
                    
                    dockerImageScanECR("${params.aws_acc_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }

        stage('Docker Image Push to ECR')
        {
            when { expression { params.action == 'create' }}
            steps{
                script{
                    
                    dockerImagePushECR("${params.aws_acc_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }
        stage('Docker Image Cleanup:ECR')
        {
            when { expression { params.action == 'create' }}
            steps{
                script{
                    
                    dockerImageCleanupECR("${params.aws_acc_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }

    }
}


